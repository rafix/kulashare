<?php

namespace Kulashare\Bundle\RentalBundle\Entity;

use Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository;

/**
 * RentalsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RentalsRepository extends EntityRepository
{
    /**
      * get rentals by user_rental.
      *
      * @param int $user_rental
      *
      * @return Rentals
      */
     public function findAllRentalsFromRent($user_rental)
     {
         $query = $this->getEntityManager()
            ->createQuery(
                'SELECT rent FROM KulashareRentalBundle:Rentals rent WHERE rent.userRental= :user_rental ORDER BY rent.start_date ASC'
            )->setParameter('user_rental', $user_rental);

         return $query->getResult();
     }
     /**
      * get rentals by user_lender.
      *
      * @param int $user_lender
      *
      * @return Rentals
      */
     public function findAllRentalsFromLender($user_lender)
     {
         $query = $this->getEntityManager()
            ->createQuery(
                'SELECT rent FROM KulashareRentalBundle:Rentals rent WHERE rent.userLender= :user_lender ORDER BY rent.start_date ASC'
            )
            ->setParameter('user_lender', $user_lender);

         return $query->getResult();
     }
    /**
     * get rentals by user_rental.
     *
     * @param int      $product_id
     * @param datetime $start_date
     * @param datetime $end_date
     *
     * @return bool
     */
    public function is_availableProduct($product_id, $start_date, $end_date)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "SELECT COUNT(rent.product) FROM KulashareRentalBundle:Rentals as rent 
                WHERE 
                	rent.product= :product_id 
                	AND (
                			(rent.start_date<:start_date AND rent.end_date>:start_date) 
                		OR 	(rent.start_date<:end_date AND rent.end_date>:end_date)
                		)
                	AND rent.rental_state='approved' "
            )->setParameters(
                            array(
                                    'product_id' => $product_id,
                                    'start_date' => $start_date,
                                    'end_date' => $end_date,
                            )
            )->getSingleScalarResult();

        return $query < 1 ? true : false;
    }

    public function SaveRental($product, $start_date, $end_date, $user_lender, $user_rental, $rental_state = 'pending')
    {
        $rentals = new Rentals();
        $rentals->setEndDate(new \DateTime($end_date));
        $rentals->setStartDate(new \DateTime($start_date));
        $rentals->setRentalState($rental_state);
        $rentals->setProduct($product);
        $rentals->setUserLender($user_lender);
        $rentals->setUserRental($user_rental);
        $em = $this->getEntityManager();
        $em->persist($rentals);
        $em->flush();

        return $rentals->getId();
    }

    public function rejectAllRentals($product_id, $user_lender, $start_date, $end_date)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "UPDATE KulashareRentalBundle:Rentals as rent SET rent.rental_state = 'rejected'
                WHERE 
                    rent.product= :product_id 
                    AND rent.userLender = :user_lender
                    AND (
                            (rent.start_date>:start_date AND rent.end_date<:start_date) 
                        OR  (rent.start_date>:end_date AND rent.end_date<:end_date)
                        )
                    AND rent.rental_state='pending' "
            )->setParameters(
                    array(
                            'product_id' => $product_id,
                            'user_lender' => $user_lender,
                            'start_date' => $start_date,
                            'end_date' => $end_date,
                    )
            );

        $result = $query->getResult();

        $query_user = $this->getEntityManager()
            ->createQuery(
                "SELECT rent FROM KulashareRentalBundle:Rentals as rent
                WHERE 
                    rent.product= :product_id 
                    AND rent.userLender = :user_lender
                    AND (
                            (rent.start_date>:start_date AND rent.end_date<:start_date) 
                        OR  (rent.start_date>:end_date AND rent.end_date<:end_date)
                        )
                    AND rent.rental_state='pending' "
            )->setParameters(
                    array(
                            'product_id' => $product_id,
                            'user_lender' => $user_lender,
                            'start_date' => $start_date,
                            'end_date' => $end_date,
                    )
            );

        $users = $query_user->getResult();

        return $users;
    }

    public function findRentalByUserAndProduct($product_id, $user_lender)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "SELECT rent FROM KulashareRentalBundle:Rentals as rent
                 WHERE 
                 rent.product= :product_id 
                 AND rent.userLender = :user_lender
                 AND rent.rental_state = 'approved' "
            )->setParameters(
                    array(
                            'product_id' => $product_id,
                            'user_lender' => $user_lender,
                        )
            );

        $result = $query->getResult();

        return $result;
    }
    public function findRentalByUserAndRental($rental_id, $user_lender)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                "SELECT rent FROM KulashareRentalBundle:Rentals as rent
                 WHERE 
                 rent.id= :rental_id 
                 AND rent.userLender = :user_lender
                 AND rent.rental_state = 'approved' "
            )->setParameters(
                    array(
                            'rental_id' => $rental_id,
                            'user_lender' => $user_lender,
                        )
            );

        $result = $query->getResult();

        return $result;
    }
}
